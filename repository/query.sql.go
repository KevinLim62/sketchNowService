// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createBoardRoom = `-- name: CreateBoardRoom :one
INSERT INTO boardRooms (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name, createdat, updatedat
`

type CreateBoardRoomParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateBoardRoom(ctx context.Context, arg CreateBoardRoomParams) (Boardroom, error) {
	row := q.db.QueryRowContext(ctx, createBoardRoom, arg.ID, arg.Name)
	var i Boardroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteBoardRoomById = `-- name: DeleteBoardRoomById :exec
DELETE FROM boardRooms
WHERE id = $1
`

func (q *Queries) DeleteBoardRoomById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBoardRoomById, id)
	return err
}

const getAllBoardRooms = `-- name: GetAllBoardRooms :many
SELECT id, name, createdat, updatedat FROM boardRooms
ORDER BY createdAt
`

func (q *Queries) GetAllBoardRooms(ctx context.Context) ([]Boardroom, error) {
	rows, err := q.db.QueryContext(ctx, getAllBoardRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Boardroom
	for rows.Next() {
		var i Boardroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardRoomById = `-- name: GetBoardRoomById :one
SELECT id, name, createdat, updatedat FROM boardRooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBoardRoomById(ctx context.Context, id uuid.UUID) (Boardroom, error) {
	row := q.db.QueryRowContext(ctx, getBoardRoomById, id)
	var i Boardroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateBoardRoomById = `-- name: UpdateBoardRoomById :one
UPDATE boardRooms
  set name = $2
WHERE id = $1
RETURNING id, name, createdat, updatedat
`

type UpdateBoardRoomByIdParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateBoardRoomById(ctx context.Context, arg UpdateBoardRoomByIdParams) (Boardroom, error) {
	row := q.db.QueryRowContext(ctx, updateBoardRoomById, arg.ID, arg.Name)
	var i Boardroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
